Introduction
============

MYPlotSpec is a Python package used to write Matplotlib-based plotting
programs that may be configured using YAML.

The intended purporse is to rapidly write programs for plotting
particular types of data while retaining detailed control over plot
configuration. The minimal 'quick & dirty' code needed to plot a certain
type of data should be very close to the polished code used to produce
publication-quality figures featuring precisely chosen proportions,
ticks, colors, and fonts. MYPlotSpec accomplishes this by providing a
system for routing arguments provided in a YAML configuration file to
matplotlib's existing formatting functions. Settings may be applied
globally or routed to specific figures, subplots, and datasets.
MYPlotSpec should have no conflict with existing matplotlibrc settings,
instead offering a level of specific control on top of them. MyPlotSpec
supports a system of defaults and presets that make it easy to prepare
multiple versions of plots, such as for a notebook, printout, or
presentation.

Dependencies
------------

MYPlotSpec supports Python 2.7 and 3.4, and requires the following
packages:

- matplotlib
- numpy
- six
- yaml

This package has been tested with Anaconda python 2.1.0 on Arch Linux,
OSX Yosemite, and Windows 8.1.

Installation
------------

Put in your ``$PYTHONPATH``:

::

    export PYTHONPATH=/path/to/my/python/modules:$PYTHONPATH

where ``/path/to/my/python/modules`` contains ``MYPlotSpec``.

Authorship
----------

MYPlotSpec is developed by Karl T Debiec, a graduate student at the
University of Pittsburgh advised by Professors Lillian T Chong and
Angela M Gronenborn.

License
-------

Released under a 3-clause BSD licence.

.. todo:
    - Decide how to manage the specification of sizes, positions, etc.
      in real-world units (inches or centimeters)
    - Support setting rcParams in yaml file
    - Check compatibility with seaborn
    - Consider supporting figure and subplot specs as lists rather than
      exclusively an integer indexed dictionary
    - Make 'debug' and 'verbose' more useful

Getting Started
---------------

For most users the first step for using MYPlotSpec is to create a subclass of
``Figure_Manager`` in which ``draw_dataset`` has been overridden to draw the
desired type of data.

::

    from MYPlotSpec.Figure_Manager import Figure_Manager
    from MYPlotSpec.Method_Defaults_Presets import Method_Defaults_Presets
    from MYPlotSpec.Manage_Kwargs import Manage_Kwargs

    class Custom_Figure_Mangater(Figure_Manager)

        @Method_Defaults_Presets
        def draw_dataset(subplot, **kwargs):

        
