Matplotlib YAML Plot Specification (MYPlotSpec) is a Python package used to
write Matplotlib-based plotting scripts that may be configured using YAML.

This package is intended to provide an easy interface for managing
dataset-specific configuration settings (e.g input and output files) alongside
matplotlib style settings (e.g. color, font, ticks), without needing to manually
implement the style settings.

For example: the following input file might be used to plot three datasets on
three pages of a pdf file:

::

    figures:
      all:
        outfile: test.pdf
        subplots:
          all:
            xticks:  [1,2,3,4,5,6,7,8,9,10]
            yticks:  [0,1,2,3,4,5]
      0:
        subplots:
          0:
            infile:  dataset_0.txt
      1:
        subplots:
          0:
            infile:  dataset_1.txt
      2:
        subplots:
          0:
            infile:  dataset_2.txt

However, the third dataset extends beyond the range we have set. we may adjust
the range for that figure only:

::

    figures:
      2:
        subplots:
          0:
            infile:  dataset_2.txt
            yticks:  [0,1,2,3,4,5,6,7,8,9,10]

The package tries to allow some consistency in the names of arguments
passed to matplotlib functions, particularly for the names of text
strings and font properties. In matplotlib different text-related
functions accept string arguments with names including 's', 't',
'title', and 'label'; and font properties arguments with names
including fontproperties, font_properties, fp, and prop. MYPlotSpec
should support the original argument names as well as a more consistent
alternative such as title_fp, label_fp, tick_fp, or legend_fp.

Requirements:
    - Python 2.7 (3.4 compatibility intended but untested)
    - matplotlib
    - yaml
    - numpy
    - six

.. todo:
    - License
    - Validate Python 3.4 compatibility
    - Select and implement some general principles about specific
      positions in absolute units
    - Base class for command-line tools (or just move to
      Figure_Manager.py)
    - Basic Figure_Manager draw_dataset (use numpy.loadtxt, probably)
    - Consistent numpy or np
    - Double-check documentation
    - Examples
    - Polish 'debug' implementation
    - Implement 'verbose'
